package kiviuq.views;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridLayout;

import javax.swing.JPanel;

import kiviuq.controllers.SelectTileController;
import kiviuq.entities.Board;
import kiviuq.entities.EliminationBoard;
import kiviuq.entities.Tile;

public class BoardView extends JPanel {
	/**
	 * auto-generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;
	
	Board board;
	TileView[][] tvs;
	
	/**
	 * Constructs a new BoardView for use when in-game.
	 * @param board
	 * 				Board represented in BoardView.
	 * @param levelScreen
	 * 				LevelScreen for which BoardView is internalized
	 */
	public BoardView(Board board, LevelScreen levelScreen) {
		super();
		this.board = board;
		tvs = new TileView[Board.BOARD_LENGTH][Board.BOARD_WIDTH];
		setLayout(new GridLayout(Board.BOARD_LENGTH, Board.BOARD_WIDTH, 10, 10));
		Tile[][] grid = board.getGrid();
		for (int x = 0; x < Board.BOARD_LENGTH; x++) {
			for (int y = 0; y < Board.BOARD_WIDTH; y++) {
				int X = x;
				int Y = y;
				tvs[x][y] = new TileView(grid[x][y]);
				tvs[x][y].addMouseListener(new SelectTileController(levelScreen, BoardView.this, X, Y));
				add(tvs[x][y]);
			}
		}
	}
	
	/**
	 * Allows BoardView to display the proper information graphically to the user.
	 */
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Tile[][] grid = board.getGrid();
		for (int x = 0; x < Board.BOARD_LENGTH; x++) {
			for (int y = 0; y < Board.BOARD_WIDTH; y++) {
				TileView tv = tvs[x][y];
				tv.setTile(grid[x][y]);
				if (board instanceof EliminationBoard) {
					EliminationBoard eb = (EliminationBoard) board;
					if (eb.getEliminatedTiles()[x][y]) {
						// TODO implement a better way of indicating this, but it works
						tv.getMainLabel().setForeground(Color.MAGENTA);
					} else {
						tv.getMainLabel().setForeground(Color.BLACK);
					}
				}
			}
		}
	}
	
	/**
	 * Retrieves Board of BoardView
	 * @return board
	 */
	public Board getBoard() {
		return board;
	}
	
	/**
	 * Sets board of BoardView
	 * @param board
	 */
	public void setBoard(Board board) {
		this.board = board;
	}
	
	/**
	 * Updates the appearance of BoardView to reflect possible changes.
	 */
	public void repaintTiles() {
		for (TileView[] r : tvs) 
			for (TileView t : r) {
				t.repaint();
			}
				
	}
}
