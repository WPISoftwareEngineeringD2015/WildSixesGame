package kiviuq.views;

import java.awt.Color;
import java.awt.Graphics;

import javax.swing.JLabel;
import javax.swing.JPanel;

import kiviuq.entities.Tile;
import java.awt.Font;

/**
 * This boundary class is used to visualize a {@link Tile} object in a
 * {@link JPanel}. Specifically, TileViews are added in a {@link BoardView}'s
 * list of components.
 * 
 * @author Evin Ugur
 *
 */
public class TileView extends JPanel {

	/**
	 * Auto-generated by eclipse to suppress a warning
	 */
	private static final long serialVersionUID = 1L;
	Tile tile;
	JLabel lblValue;
	JLabel lblMult;

	/**
	 * Creates a new TileView
	 * 
	 * @param tile
	 *            Tile which is represented by the View.
	 */
	public TileView(Tile tile) {
		super();
		this.tile = tile;
		setSize(50, 50);
		setLayout(null);

		this.lblValue = new JLabel("VALUE");
		lblValue.setBounds(42, 5, 31, 14);
		add(lblValue);

		this.lblMult = new JLabel("MULT");
		lblMult.setFont(new Font("Tahoma", Font.PLAIN, 10));
		lblMult.setBounds(42, 30, 46, 14);
		add(lblMult);
	}

	/**
	 * Updates View to properly display information of the Tile
	 */
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		if (tile == null) { // just used for testing...
			setBackground(Color.BLACK);
			return;
		}
		if (this.getTile().isSelected())
			setBackground(Color.WHITE);
		else
			setBackground(getColor());
		lblValue.setText(tile.toString());
		lblMult.setText(tile.multToString());
	}

	/**
	 * Array of Color types used in TileViews
	 */
	private final static Color[] NUMBER_COLORS = { Color.ORANGE, Color.CYAN,
			Color.GREEN, Color.RED, Color.YELLOW, Color.BLUE };

	/**
	 * Determines what color a tile should be based on its type/number.
	 * 
	 * @return Color of TileView
	 */
	public Color getColor() {
		switch (tile.getType()) {
		case Null:
			return Color.gray;
		case Number:
			int num = tile.getNumber();
			return NUMBER_COLORS[num - 1];
		case Release:
			return Color.PINK;
		default:
			return Color.BLACK;
		}
	}

	/**
	 * Sets a TileView to show information for a new Tile.
	 * 
	 * @param tile
	 *            New Tile for the TileView
	 */
	public void setTile(Tile tile) {
		if (this.tile != tile) {
			this.tile = tile;
			this.repaint();
		}
	}

	/**
	 * Returns what Tile the TileView is representing
	 * 
	 * @return Tile
	 */
	public Tile getTile() {
		return tile;
	}

	/**
	 * Returns the Value Label of the TileView
	 * 
	 * @return ValueLabel
	 */
	public JLabel getMainLabel() {
		return lblValue;
	}
}
